//utilityfunctions.h

#include "LinkedList.h"

// Function declarations
int findMax(LinkedList* list);
int countNodes(LinkedList* list);
void printEvenNumberedNodes(LinkedList* list);
void swapHalves(LinkedList* list);

//utilityfunctions.cpp

#include <iostream>
#include "UtilityFunctions.h"
using namespace std;

// Function to find maximum value in the list
int findMax(LinkedList* list) {
    // Assuming list is non-empty, otherwise add null check
    Node* current = list->head;
    int maxVal = current->data;
    while (current != nullptr) {
        if (current->data > maxVal)
            maxVal = current->data;
        current = current->next;
    }
    return maxVal;
}

// Function to count the total number of nodes in the list
int countNodes(LinkedList* list) {
    int count = 0;
    Node* current = list->head;
    while (current != nullptr) {
        count++;
        current = current->next;
    }
    return count;
}

// Function to print even-numbered nodes
void printEvenNumberedNodes(LinkedList* list) {
    int position = 1;
    Node* current = list->head;
    while (current != nullptr) {
        if (position % 2 == 0)
            cout << current->data << " ";
        current = current->next;
        position++;
    }
    cout << endl;
}

void swapHalves(LinkedList* list) {
    if (list == nullptr || list->head == nullptr || list->head->next == nullptr) {
        // If the list is empty or has only one node, no swap is needed.
        return;
    }

    Node* slow = list->head;
    Node* fast = list->head;
    Node* prev = nullptr;

    // Use the slow-fast pointer technique to find the middle of the list
    while (fast != nullptr && fast->next != nullptr) {
        prev = slow;
        slow = slow->next;
        fast = fast->next->next;
    }

    // Split the list into two halves
    Node* secondHalf = slow;
    prev->next = nullptr;  // End the first half

    // Now, swap the two halves
    Node* temp = secondHalf;
    while (temp->next != nullptr) {
        temp = temp->next;
    }

    temp->next = list->head; // Attach the first half at the end of second half
    list->head = secondHalf; // Update the head to point to the second half
}

//main.cpp
#include <iostream>
#include "UtilityFunctions.h"
using namespace std;

int main() {
    LinkedList list;
    list.insert(40);
    list.insert(30);
    list.insert(20);
    list.insert(10);

    cout << "Original Linked List: ";
    list.display();

    cout << "Max value: " << findMax(&list) << endl;
    cout << "Number of nodes: " << countNodes(&list) << endl;

    cout << "Even-numbered nodes: ";
    printEvenNumberedNodes(&list);

    cout << "Swapping halves of the list..." << endl;
    swapHalves(&list);

    cout << "Linked List after swapping halves: ";
    list.display();

    return 0;
}



